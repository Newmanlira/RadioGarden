services:
  # ---  Data Lake (simulador de S3) ---
  minio:
    image: minio/minio:latest
    container_name: minio_lake
    command: server /data --console-address ":9001"
    ports:
      - "9100:9000"  # API
      - "9101:9001"  # Interface Web
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - ./data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - data-network

  # --- Banco de Dados do Airflow ---
  postgres:
    image: postgres:16-alpine
    container_name: postgres_db
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-network

  # --- Inicializador do Airflow (Roda 1 vez) ---
  airflow-init:
    image: apache/airflow:2.9.3-python3.11
    container_name: airflow_init
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    entrypoint: /bin/bash
    command:
      - -c
      - |
        until 0; do
          (airflow db check && airflow db upgrade && 
           airflow users create \
            --username airflow \
            --password airflow \
            --firstname Newman \
            --lastname Neto \
            --role Admin \
            --email admin@example.com) && break
          echo "Aguardando o banco de dados (Postgres)..."
          sleep 5
        done
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - data-network

  # --- Servidor Web do Airflow (Interface) ---
  airflow-webserver:
    image: apache/airflow:2.9.3-python3.11
    container_name: airflow_webserver
    restart: always
    command: webserver                # <-- ADICIONADO
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - data-network

  # --- Agendador do Airflow 
  airflow-scheduler:
    image: apache/airflow:2.9.3-python3.11
    container_name: airflow_scheduler
    restart: always
    command: scheduler          
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    networks:
      - data-network

# --- Volumes (Onde os dados persistem) ---
volumes:
  minio_data:
  postgres_data:

# --- Redes (Como os contÃªineres se falam) ---
networks:
  data-network:
    driver: bridge
